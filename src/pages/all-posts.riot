<all-posts>
  <h1>My Notes App</h1>
  <div class="form-wrapper">
    <div class="form-item">
      Name:
      <input
        oninput={ handleInputName }
        placeholder="Note name"
        value={ state.formData.name }
      />
    </div>
    <div class="form-item">
      Description:
      <input
        oninput={ handleInputDescription }
        placeholder="Note description"
        value={ state.formData.description }
      />
    </div>
    <div class="form-item">
      Image:
      <input
        type="file"
        accept="image/*"
        onchange={ handleSelectImage }
      />
    </div>
  </div>
  <default-button
    on-click={ createNote }
    name="Create Note"
    active={ state.isActive }
    disabled={ state.isActive }
  />
  <cancel-button
    on-click={ clear }
    name="Cancel"
  />
  <hr />
  <div>
    <div class="note" each={ (note, index) in state.notes } key={ index }>
      <h2>{ note.name }</h2>
      <p>{ note.description }</p>
      <img if={ note.image } src={ note.image } width="400" />
      <delete-button
        value={ note.id }
        on-click={ deleteNote }
        name="Delete note"
      />
      <hr />
    </div>
  </div>

  <script>
    import { API, Storage } from 'aws-amplify'
    import { listNotes } from '../graphql/queries'
    import {
      createNote as createNoteMutation,
      deleteNote as deleteNoteMutation
    } from '../graphql/mutations'
    import DefaultButton from '../components/buttons/default-button.riot'
    import DeleteButton from '../components/buttons/delete-button.riot'
    import CancelButton from '../components/buttons/cancel-button.riot'

    const initialFormState = {
      name: '',
      description: ''
    }

    export default {
      state: {
        formData: initialFormState,
        notes: [],
        isActive: false
      },
      components: {
        DefaultButton,
        DeleteButton,
        CancelButton
      },
      onBeforeMount() {
        this.fetchNotes()
      },
      fetchNotes() {
        API.graphql({
          query: listNotes
        })
        .then(apiData => {
          const notesFromAPI = apiData.data.listNotes.items

          // Only image data will have a Promise object set
          notesFromAPI.map(note => {
            if (note.image) {
              Storage
                .get(note.image)
                .then(image => {
                  note.image = image
                })
            }
            return note
          })
          this.state.notes = apiData.data.listNotes.items
          setTimeout(() => {
            this.update()
          }, 300)
        })
      },
      createNote() {
        const formData = this.state.formData
        if (!formData.name || !formData.description) return

        API.graphql({
          query: createNoteMutation,
          variables: {
            input: formData
          }
        })
        .then(e => {
          if (formData.image) {
            Storage
              .get(formData.image)
              .then(image => {
                formData.image = image
              })
          }
          this.setNotes(formData)
          this.setFormData(initialFormState)
        })
      },
      deleteNote(e) {
        const id = e.target.value
        const newNotesArray = this.state.notes.filter(note => note.id !== id)
        API.graphql({
          query: deleteNoteMutation,
          variables: {
            input: { id }
          }
        })
        .then(() => this.update({
          notes: newNotesArray
        }))
      },
      setNotes(val) {
        setTimeout(() => {
          this.update({
            notes: [ ...this.state.notes, val || null ]
          })
        }, 300)
      },
      setFormData(val) {
        this.update({
          formData: val
        })
      },
      clear() {
        this.update({
          formData: initialFormState
        })
      },
      handleInputName(e) {
        this.setFormData({
          ...this.state.formData,
          name: e.target.value
        })
        this.checkActive()
      },
      handleInputDescription(e) {
        this.setFormData({
          ...this.state.formData,
          description: e.target.value
        })
        this.checkActive()
      },
      handleSelectImage(e) {
        if (!e.target.files[0]) return

        const file = e.target.files[0]
        this.setFormData({
          ...this.state.formData,
          image: file.name
        })
        Storage.put(file.name, file)
        this.fetchNotes()
      },
      checkActive() {
        const { name, description } = this.state.formData
        if (name !== '' && description !== '') this.state.isActive = true
        else this.state.isActive = false
        this.update()
      }
    }
  </script>

  <style>
    .form-wrapper {
      display: flex;
      flex-direction: column;
      margin-bottom: 30px;
    }
    .form-item {
      display: flex;
      flex-direction: column;
    }
    .form-item input {
      padding: 5px;
      font-size: 1rem;
    }
    .form-item + .form-item {
      margin: 15px 0 0;
    }
    .note + .note {
      margin-top: 10px;
    }
    cancel-button {
      margin-left: 10px;
    }
  </style>
</all-posts>