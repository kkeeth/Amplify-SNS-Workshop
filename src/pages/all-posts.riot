<all-posts>
  <h1>My Notes App</h1>
  <app-form />
  <hr />
  <post-list notes={ state.notes } />

  <script>
    import { API, Storage } from 'aws-amplify'
    import { listNotes } from '../graphql/queries'
    import {
      createNote as createNoteMutation,
      deleteNote as deleteNoteMutation
    } from '../graphql/mutations'
    import AppForm from '../components/app-form.riot'
    import PostList from '../components/post-list.riot'

    const initialFormState = {
      name: '',
      description: ''
    }

    export default {
      state: {
        formData: initialFormState,
        notes: [],
        isActive: false
      },
      components: {
        AppForm,
        PostList
      },
      onBeforeMount() {
        this.fetchNotes()
      },
      fetchNotes() {
        API.graphql({
          query: listNotes
        })
        .then(apiData => {
          const notesFromAPI = apiData.data.listNotes.items

          // Only image data will have a Promise object set
          notesFromAPI.map(note => {
            if (note.image) {
              Storage
                .get(note.image)
                .then(image => {
                  note.image = image
                })
            }
            return note
          })
          this.state.notes = apiData.data.listNotes.items
          setTimeout(() => {
            this.update()
          }, 300)
        })
      },
      createNote() {
        const formData = this.state.formData
        if (!formData.name || !formData.description) return

        API.graphql({
          query: createNoteMutation,
          variables: {
            input: formData
          }
        })
        .then(e => {
          if (formData.image) {
            Storage
              .get(formData.image)
              .then(image => {
                formData.image = image
              })
          }
          this.setNotes(formData)
          this.setFormData(initialFormState)
        })
      },
      setNotes(val) {
        setTimeout(() => {
          this.update({
            notes: [ ...this.state.notes, val || null ]
          })
        }, 300)
      },
      setFormData(val) {
        this.update({
          formData: val
        })
      },
      handleInputName(e) {
        this.setFormData({
          ...this.state.formData,
          name: e.target.value
        })
        this.checkActive()
      },
      handleInputDescription(e) {
        this.setFormData({
          ...this.state.formData,
          description: e.target.value
        })
        this.checkActive()
      },
      handleSelectImage(e) {
        if (!e.target.files[0]) return

        const file = e.target.files[0]
        this.setFormData({
          ...this.state.formData,
          image: file.name
        })
        Storage.put(file.name, file)
        this.fetchNotes()
      },
      checkActive() {
        const { name, description } = this.state.formData
        if (name !== '' && description !== '') this.state.isActive = true
        else this.state.isActive = false
        this.update()
      }
    }
  </script>

  <style>
    .form-wrapper {
      display: flex;
      flex-direction: column;
      margin-bottom: 30px;
    }
    .form-item {
      display: flex;
      flex-direction: column;
    }
    .form-item input {
      padding: 5px;
      font-size: 1rem;
    }
    .form-item + .form-item {
      margin: 15px 0 0;
    }
    cancel-button {
      margin-left: 10px;
    }
  </style>
</all-posts>